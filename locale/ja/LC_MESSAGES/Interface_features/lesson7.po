# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, AnyBody Technology
# This file is distributed under the same license as the AnyBody Tutorials
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: AnyBody Tutorials 7.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-12-08 15:42+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../Interface_features/lesson7.rst:2
msgid "Lesson 7: Wrapping the Model with AnyBody Project"
msgstr ""

#: ../../Interface_features/lesson7.rst:4
msgid ""
"“AnyBody Project” or just AnyProject, since it is defined with this class"
" name, is a data structure aimed at wrapping a model and bringing its "
"important features to the surface in AnyBody GUI and thereby closer to "
"the user."
msgstr ""

#: ../../Interface_features/lesson7.rst:9
msgid ""
"The objective is to ease execution of important model’s operations and "
"related actions and collect these in a dedicated and intuitive place. "
"This is equally aimed at the experienced and advanced user doing "
"repetitive work with many models or many data sets, users working with "
"models prepared by others, and the less experienced users who need to "
"work with a model for processing data, but who does not have to develop "
"it or understand it’s every detail."
msgstr ""

#: ../../Interface_features/lesson7.rst:17
msgid "The AnyProject functions can be summarized by"
msgstr ""

#: ../../Interface_features/lesson7.rst:19
msgid ""
"Model View Definitions that provide features for defining particular "
"views of the model and user interface for activating the views."
msgstr ""

#: ../../Interface_features/lesson7.rst:22
msgid ""
"Task definitions that wrap the important operations of the model with a "
"user interface for execution. A Model View Definition can be associated "
"with a given task."
msgstr ""

#: ../../Interface_features/lesson7.rst:26
msgid ""
"All project objects are equipped with descriptions that can be used for "
"explaining the task or view to new users."
msgstr ""

#: ../../Interface_features/lesson7.rst:29
msgid ""
"Project file information is automatically found by the system and can be "
"supplemented by the user."
msgstr ""

#: ../../Interface_features/lesson7.rst:32
msgid ""
"“Send to” function for exporting the model and all of its resources to a "
"new location"
msgstr ""

#: ../../Interface_features/lesson7.rst:35
msgid ""
"An AnyBody project is defined in the model, in principle as any other "
"objects of the model using the AnyProject class. The main difference to "
"most objects is that project objects do not provide new information by "
"themselves, but merely collect information to the AnyBody Modeling System"
" GUI about what is important in the particular model."
msgstr ""

#: ../../Interface_features/lesson7.rst:41
msgid ""
"In this lesson, we shall make an AnyBody Project wrapper of the very "
"simple planar arm model (:download:`Demo.arm2d.any "
"<Downloads/demo.arm2d.any>` using :download:`dumbbell.stl "
"<Downloads/dumbbell.stl>`) that we have used in previous lessons. The "
"final example file we shall build in this lesson is "
":download:`AnyProject.any <Downloads/AnyProject.any>` using "
":download:`DrawGroups.any <Downloads/DrawGroups.any>` in addition."
msgstr ""

#: ../../Interface_features/lesson7.rst:48
msgid ""
"We include the model file in our new main file, and we create an empty "
"project called ArmProject."
msgstr ""

#: ../../Interface_features/lesson7.rst:67
msgid "Project Files"
msgstr ""

#: ../../Interface_features/lesson7.rst:69
msgid ""
"Firstly, we add some file information to the project. This is done in the"
" AnyProject Files folder, which is a predefined folder. Here we set two "
"files, the MainFile and the SetValueFile."
msgstr ""

#: ../../Interface_features/lesson7.rst:96
msgid ""
"The MainFile indicates simply which file is the main file for this "
"project. It may seem a bit redundant, but this information also serves to"
" determine whether the project is active or not. Multiple projects can in"
" principle exist in the model, but only the one(s) having the correct "
"main file is considered active by the system."
msgstr ""

#: ../../Interface_features/lesson7.rst:102
msgid ""
"This implies that we can include a file that is actually a Main file by "
"itself (as in this case with Demo.arm2d.any), and this main file could, "
"in fact, have a project (AnyProject) of its own, but it would only be "
"active if we actually load the arm2d.any. In the given example we have "
"only one AnyProject."
msgstr ""

#: ../../Interface_features/lesson7.rst:108
msgid ""
"The SetValueFile is a file used by the project for storing modified "
"values. It is automatically saved when closing the model and "
"automatically loaded, although only upon user acceptance when loading the"
" model. Apart from this, it is saved and loaded exactly like the manual "
"execution of the Main folder’s Class Operations, “Save Values” and “Load "
"Values”, respectively."
msgstr ""

#: ../../Interface_features/lesson7.rst:115
msgid ""
"The SetValueFile needs not to be specified, and it will only be managed "
"by active projects, i.e. projects with a MainFile specification matching "
"the loaded Main file."
msgstr ""

#: ../../Interface_features/lesson7.rst:119
msgid ""
"The Files folder also contains some file-objects for storing project file"
" information. These are automatically filled during loading. Their "
"information can, of course, be accessed or just inspected by the user, "
"but it is also used during “Send to” export operations on the model "
"(Class Operation of Main). It should, however, be noticed that the “Send "
"to” Class Operation to some extent is functional for models without "
"project information too."
msgstr ""

#: ../../Interface_features/lesson7.rst:128
msgid "Model View Definitions"
msgstr ""

#: ../../Interface_features/lesson7.rst:130
msgid ""
"Model View Definitions are basically a set of view actions applied to a "
"number of drawing groups. In order to set up some standard views for the "
"model, we shall, therefore, define some drawing groups:"
msgstr ""

#: ../../Interface_features/lesson7.rst:175
msgid ""
"In the final example files, this is actually done in a separate file, "
":download:`DrawGroups.any <Downloads/DrawGroups.any>`, so we now have"
msgstr ""

#: ../../Interface_features/lesson7.rst:204
msgid ""
"Having defined the draw groups we need, we can return to the project "
"definition and define our view"
msgstr ""

#: ../../Interface_features/lesson7.rst:242
msgid ""
"This view we define using three draw groups, all segments, all muscles "
"and the deltoid muscles. We want to show the model-defined segments and "
"deltoid muscle being transparent and the rest of the muscles will just "
"show their default drawing."
msgstr ""

#: ../../Interface_features/lesson7.rst:247
msgid ""
"In the final example model you can download, we have defined three other "
"views, just to show how it works. For further information on how to "
"define Model View Definitions, please refer to the Reference Manual."
msgstr ""

#: ../../Interface_features/lesson7.rst:252
msgid "Project Tasks"
msgstr ""

#: ../../Interface_features/lesson7.rst:254
msgid ""
"Firstly, we define two simple tasks that execute the two important "
"operations of our main (our only) study. It executes the setting of "
"initial positions and inverse dynamics. These tasks are created by "
"defining two AnyProjectTaskOperation objects that point to the particular"
" operations in ArmModelStudy."
msgstr ""

#: ../../Interface_features/lesson7.rst:299
msgid ""
"Each task is accompanied by a description consisting of a title, a body "
"text, and a tooltip string. All strings will appear in the AnyBody GUI in"
" the Projects pane. Additionally, the description can hold a list of "
"files. Here we have just added links to some file that are already part "
"of the model, but a more relevant case could be to make links to external"
" documentation related to the given task and model."
msgstr ""

#: ../../Interface_features/lesson7.rst:306
msgid ""
"In addition to these options for executing the model, we want to equip "
"the model with tasks for saving and loading the simulated output. This "
"can be done by declaring an AnyOperationMacro object that calls the Class"
" Operations for “Save data” and “Load data” on the output folder for "
"MainArmModel.Study. All this, we do inside the task folder definition "
"because it is not part of the original model, see the following code:"
msgstr ""

#: ../../Interface_features/lesson7.rst:386
msgid ""
"Finally, a special task is demonstrated, namely AnyProjectTaskLoadModel. "
"It can load models and here, we shall indeed make an operation that loads"
" the model without any project definition. In other words, we create an "
"AnyProjectTaskLoadModel that loads the Demo.arm2d.any, but without the "
"AnyProject.any master file."
msgstr ""

#: ../../Interface_features/lesson7.rst:416
msgid ""
"The practical relevance of this particular load task may be hard to see, "
"but it illustrates the option of loading another model from one already "
"loaded."
msgstr ""

#: ../../Interface_features/lesson7.rst:420
msgid ""
"A more relevant case could have been to share the project source code "
"between two or more different Main file so that loading another Main file"
" would leave the project information, such as Tasks and Views, more or "
"less unaffected, even though the loaded model is shifted. This way a Task"
" flow that requires more than one model can in principle be bound "
"together in the same user interface."
msgstr ""

#: ../../Interface_features/lesson7.rst:428
msgid "HTML-based interaction in AnyProject"
msgstr ""

#: ../../Interface_features/lesson7.rst:430
msgid ""
"From AnyBody version 5.1, the windows displaying AnyProject are now "
"capable of using HTML-based contents. This opens new possibilities for "
"user interaction with the model from AnyProject, and it also makes it "
"possible to have user-defined, dynamically updated, and nicely formatted "
"views in the AnyProject. In this section, we shall add simple examples of"
" both HTML-based and dynamically updated content as well as a hyperlink "
"for user interaction with the model to the AnyProject model we have been "
"creating above."
msgstr ""

#: ../../Interface_features/lesson7.rst:440
msgid "Adding HTML content to an AnyProject AnyDescription"
msgstr ""

#: ../../Interface_features/lesson7.rst:442
msgid ""
"We have already seen that the various types of AnyProject tasks all have "
"an AnyDescription member, which is used to describe the purpose and "
"functionality of the task. The AnyDescription can be used to display HTML"
" contents through two new optional member variables. We will start by "
"adding a new AnyProject task, which contains an AnyDescription with some "
"simple HTML. For this, we use the BodyHTML member, which is a string-"
"value object that is one option of entering the body text of the "
"description view."
msgstr ""

#: ../../Interface_features/lesson7.rst:451
msgid ""
"Please add the following AnyProject task to the ``Tasks`` folder in the "
"example:"
msgstr ""

#: ../../Interface_features/lesson7.rst:469
msgid ""
"After reloading the model and viewing the new AnyProject Task, we see "
"that the content of ``BodyHTML`` is now being used for displaying the "
"description of the task. When ``BodyHTML`` is defined in the script, it "
"will take precedence over any defined ``Title`` and ``BodyText`` in the "
"AnyDescription."
msgstr ""

#: ../../Interface_features/lesson7.rst:475
msgid ""
"Please note that this AnyProject Task doesn’t actually have any operation"
" defined, and because of this, there is no “execute task” button shown "
"for it. In order to actually interact with the model from this AnyProject"
" task, we will be using some special HTML links, through which we can "
"pass commands to the AnyBody Modeling System."
msgstr ""

#: ../../Interface_features/lesson7.rst:481
msgid "Modify the newly created ``Set_value_example`` task to look like this:"
msgstr ""

#: ../../Interface_features/lesson7.rst:498
msgid "The new HTML link defined in the ``BodyHTML`` is formatted like this:"
msgstr ""

#: ../../Interface_features/lesson7.rst:504
msgid ""
"The ``about:anybody`` (or just ``anybody``) beginning of the href-value "
"indicates to AnyBody that the link is an internal link and the *command "
"argument* tells what to do. In this case, we make a link to an object, "
"i.e., a link that takes us to the Model Tree of AMS."
msgstr ""

#: ../../Interface_features/lesson7.rst:509
msgid ""
"Please note that in order to make the ``BodyHTML`` contain the quote "
"characters, we have to use the ``strquote()`` function to add “ to the "
"text string we create; we cannot enter quote characters directly, since "
"the AnyScript parser will see any second quote as the end of the entire "
"string leading to a syntax error for the rest of the string."
msgstr ""

#: ../../Interface_features/lesson7.rst:515
msgid ""
"Next, we want to use another type of internal command link to actually "
"edit a value in the loaded model. The way we can do this is by using a "
"command for calling an AnyBody macro defined elsewhere in the AnyScript "
"code. We start by creating a new macro command."
msgstr ""

#: ../../Interface_features/lesson7.rst:520
msgid "Please modify the beginning of the AnyProject file to look like this:"
msgstr ""

#: ../../Interface_features/lesson7.rst:540
msgid ""
"This adds a new ``Macros`` AnyFolder, which currently contains a single "
"string, defining a macro which calls the “Set Value” Class Operation on "
"the ``HandNode`` of the model. We now have to use this new string in our "
"AnyDescription ``BodyHTML``. We do this by adding a new HTML link to the "
"BodyHTML, where we use a special command argument that interprets and "
"executes this string as a macro."
msgstr ""

#: ../../Interface_features/lesson7.rst:547
msgid "Please modify the AnyProject Task from earlier to look like this:"
msgstr ""

#: ../../Interface_features/lesson7.rst:567
msgid ""
"For a full list of the available AHTML commands, please refer to the "
"AnyBody Reference Manual (Introduction->How to write AnyScript->Section: "
"HTML-based Descriptions)."
msgstr ""

#: ../../Interface_features/lesson7.rst:572
msgid "Using external HTML files"
msgstr ""

#: ../../Interface_features/lesson7.rst:574
msgid ""
"We have seen that HTML content can be written directly in an "
"AnyDescription's ``BodyHTML`` member, but for larger HTML pages this can "
"become very cumbersome. It is therefore also possible to use external "
"HTML files as AnyDescription HTML sources. This is done by setting the "
"AnyDescription's ``HTMLURL`` member to the address of an external HTML "
"resource. This URL can point to a file in the local file system as well "
"as to a location on the Internet."
msgstr ""

#: ../../Interface_features/lesson7.rst:582
msgid ""
"In this example, we will use an external HTML file to display a table "
"showing the ``r`` value of the ``Handnode`` and having the information "
"updated while an operation is being run on the model. We do this by "
"transferring the dynamic data to the external HTML file along with the "
"URL and then using JavaScript in the HTML file for inserting the data in "
"the right place. The data is transferred through the URL by encoding it "
"in the URL's query string."
msgstr ""

#: ../../Interface_features/lesson7.rst:590
msgid ""
"We will use a previously prepared external HTML file called "
":download:`AnyHTML_argument.htm <Downloads/AnyHTML_argument.htm>`."
msgstr ""

#: ../../Interface_features/lesson7.rst:593
msgid ""
"We create a new AnyProject Task in the tasks folder for displaying this "
"HTML file and sending data to it:"
msgstr ""

#: ../../Interface_features/lesson7.rst:612
msgid ""
"In this example we use the query-string of the URL to transfer both the "
"complete name and value to the HTML file. How we actually use the data "
"passed through the query-string is determined entirely by the contents of"
" the external HTML file."
msgstr ""

#: ../../Interface_features/lesson7.rst:617
msgid ""
"Please also note that we use a local AnyFile variable to specify the HTML"
" file path without defining its absolute location in the script. The "
"AnyFile variable resolves the path of the AnyScript file, and we can get "
"the absolute file location through the ``FilePathCompleteOf`` function. "
"This is necessary because the ``HTMLURL`` has to be a complete absolute "
"URL and not a relative URL."
msgstr ""

#: ../../Interface_features/lesson7.rst:624
msgid ""
"If we try loading the model now, we will see the HTML page, but it is not"
" being updated when we run the, for instance, InverseDynamics operation "
"in the model. This is because the AnyDescription containing the "
"``HTMLURL`` is not part of the study, and therefore, the ``HTMLURL`` "
"expression is not re-evaluated."
msgstr ""

#: ../../Interface_features/lesson7.rst:630
msgid ""
"In order to enable this, we add the AnyDescription for this new task to "
"the ``ArmModelStudy`` by modifying the beginning of the AnyProject file "
"to look like this:"
msgstr ""

#: ../../Interface_features/lesson7.rst:656
msgid ""
"If we reload the model and run the ``InverseDynamics`` operation now "
"while viewing the new AnyProject task, we will see that the displayed "
"value for ``r`` is being updated dynamically as the values change in the "
"model."
msgstr ""

#: ../../Interface_features/lesson7.rst:668
msgid "noindex"
msgstr ""

