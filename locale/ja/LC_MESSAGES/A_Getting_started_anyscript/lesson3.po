# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, AnyBody Technology
# This file is distributed under the same license as the AnyBody Tutorials
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: AnyBody Tutorials 7.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-12-08 15:42+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../A_Getting_started_anyscript/lesson3.rst:2
msgid "Lesson 3: Connecting Segments by Joints"
msgstr ""

#: ../../A_Getting_started_anyscript/lesson3.rst:4
msgid ""
"Here's an AnyScript file to start on if you have not completed the "
"previous lesson: :download:`demo.lesson3.any "
"<Downloads/demo.lesson3.any>`."
msgstr ""

#: ../../A_Getting_started_anyscript/lesson3.rst:8
msgid "Some quick theory"
msgstr ""

#: ../../A_Getting_started_anyscript/lesson3.rst:10
msgid ""
"You can think of joints in different ways. We tend to perceive them as "
"providers of freedom, which is correct compared to a rigid structure. "
"However, in dynamics, it is often practical to perceive joints to be "
"constraining movement rather than releasing it. A system of two "
"completely independent segments will have 2 x 6 = 12 degrees of freedom "
"in total. When you join them, you take some of these degrees of freedom "
"away. The different joint types distinguish themselves by the degrees of "
"freedom that are relinquished by the rigid body system."
msgstr ""

#: ../../A_Getting_started_anyscript/lesson3.rst:20
msgid "The global reference frame"
msgstr ""

#: ../../A_Getting_started_anyscript/lesson3.rst:22
msgid ""
"Not knowing where stuff is in space can be very impractical, and so the "
"first thing to do is usually to ground the mechanism somewhere. Perhaps "
"you remember these lines somewhere at the top of the AnyScript code:"
msgstr ""

#: ../../A_Getting_started_anyscript/lesson3.rst:38
msgid ""
"This is actually the definition of a global reference frame for our "
"model. It is similar to a segment in the sense that we can add point "
"nodes to it for attaching joints and muscles. Let’s do just that. Again "
"you can insert the objects with the object inserter or save time by "
"simply cutting and pasting the following lines into your model:"
msgstr ""

#: ../../A_Getting_started_anyscript/lesson3.rst:66
msgid ""
"The first line, \"AnyDrawRefFrame ...\" merely displays the global "
"reference system in the graphics window. Let us cut down on the display "
"size and change its color to distinguish it from the yellow segments:"
msgstr ""

#: ../../A_Getting_started_anyscript/lesson3.rst:78
msgid ""
"The remaining lines define point nodes attached to the global reference "
"system."
msgstr ""

#: ../../A_Getting_started_anyscript/lesson3.rst:82
msgid "Creating a revolute joint"
msgstr ""

#: ../../A_Getting_started_anyscript/lesson3.rst:84
msgid ""
"With all the necessary point nodes available, we can now connect the "
"upper arm to the global reference frame through a \"shoulder\" joint. "
"While a real shoulder is a very complex mechanism with several joints, "
"this is a planar 2-D model, where we will define it as a simple hinge. We"
" create a new folder to contain the joints and define the shoulder:"
msgstr ""

#: ../../A_Getting_started_anyscript/lesson3.rst:111
msgid "Why use ‘.’ and ‘..’ in AnyScript? - Relative folder paths"
msgstr ""

#: ../../A_Getting_started_anyscript/lesson3.rst:113
msgid ""
"A hinge is also called a revolute joint, and this is what the type "
"definition \"AnyRevoluteJoint\" means. The joint connects two segments, "
"and it needs to know which points on each segment to connect. For this "
"purpose, we have the lines"
msgstr ""

#: ../../A_Getting_started_anyscript/lesson3.rst:124
msgid ""
"They define the two connected nodes on the GlobalRef and UpperArm "
"segments . Notice the two dots in front of the names. They signify that "
"the GlobalRef and Segs folders are defined two levels outside the folder "
"where we are in the Model Tree. If you neglected the two dots, then "
"AnyBody would search for the two objects in the Shoulder folder and fail "
"to find them. This \"dot\" system is quite similar to the system you may "
"know from directory structures in Dos, Windows, Unix, or just about any "
"other computer operating system."
msgstr ""

#: ../../A_Getting_started_anyscript/lesson3.rst:134
msgid "Reference objects and the ‘&’ symbol"
msgstr ""

#: ../../A_Getting_started_anyscript/lesson3.rst:136
msgid ""
"But there is more to it than that. You can see that the Shoulder point on"
" GlobalRef has been given the local name of \"GroundNode\". This means "
"that, within the context of this joint object, we can hereafter refer to "
"the point as \"GroundNode\" instead of the longer external reference."
msgstr ""

#: ../../A_Getting_started_anyscript/lesson3.rst:141
msgid ""
"Another specialty is the '&' in front of the local name. If you have some"
" experience with C++, you will realize that GroundNode is merely a "
"reference (a pointer) to GlobalRef.Shoulder rather than a copy of it. So "
"if GlobalRef.Shoulder moves around, Shoulder.GroundNode will keep up with"
" those changes in position. Hit F7 to load the model again to make sure "
"that the definition is correct."
msgstr ""

#: ../../A_Getting_started_anyscript/lesson3.rst:149
msgid "Customizing the revolute joint"
msgstr ""

#: ../../A_Getting_started_anyscript/lesson3.rst:151
msgid "We then have:"
msgstr ""

#: ../../A_Getting_started_anyscript/lesson3.rst:158
msgid ""
"While each rigid body segment has a reference frame which moves along "
"with it, nodes on a segment can have their own reference frames. These "
"frames would also move along with the segment, but their orientations can"
" be made to differ from the segmental frame. The relative orientation "
"between the two frames can be user-defined and is held fixed thereon."
msgstr ""

#: ../../A_Getting_started_anyscript/lesson3.rst:164
msgid ""
"The AnyBody system is always three-dimensional, even when our model is "
"two dimensional. The property Axis = z simply specifies that both "
"segments connected by that joint will rotate about the z axis of the node"
" at the joint. Does that sound complicated?"
msgstr ""

#: ../../A_Getting_started_anyscript/lesson3.rst:169
msgid ""
"In other words, the z-axes of the nodes on either connected segment will "
"always be parallel, and so the mechanism will rotate in the plane "
"perpendicular to these axes. The out-of-plane relative orientation of the"
" two segments can be adjusted by rotating the reference frames of the "
"nodes being connected. This is relevant if you want one of the segments "
"to rotate about some skewed axis."
msgstr ""

#: ../../A_Getting_started_anyscript/lesson3.rst:176
msgid ""
"The first of the two nodes declared in the joint (in this case "
"``GroundNode``) becomes the default reference frame for the joint. When "
"directly accessing the post-simulation values of constraint reaction "
"forces etc., you must remember to interpret them in the joint’s default "
"reference frame."
msgstr ""

#: ../../A_Getting_started_anyscript/lesson3.rst:183
msgid "Creating a revolute elbow joint"
msgstr ""

#: ../../A_Getting_started_anyscript/lesson3.rst:185
msgid ""
"We need an elbow joint before we are finished: the elbow. The definition "
"is completely parallel to what you have just seen, but we shall use one "
"of the handy tools to define the references. The skeleton of the elbow "
"joint is as follows:"
msgstr ""

#: ../../A_Getting_started_anyscript/lesson3.rst:208
msgid ""
"As you can clearly see, the nodes in the Elbow joint are not pointing at "
"anything yet. In this simple model it is easy to find the relative path "
"of the pertinent nodes on the upper arm and the forearm, but in a complex"
" model, it can be difficult to sort these references out. So the system "
"offers a tool to help you."
msgstr ""

#: ../../A_Getting_started_anyscript/lesson3.rst:215
msgid "Absolute folder path (and some useful tips)"
msgstr ""

#: ../../A_Getting_started_anyscript/lesson3.rst:217
msgid ""
"If you click the model tab in the tree view on the left-hand side of the "
"editor window, then the tree of objects in the loaded model appears. All "
"model components can be found in this tree including the two nodes we are"
" going to connect in the elbow. Click to place the cursor just before the"
" semicolon in the &UpperArmNode definition in the Elbow joint. Then "
"expand the tree as shown below."
msgstr ""

#: ../../A_Getting_started_anyscript/lesson3.rst:224
msgid "|Model tree ElbowNode|"
msgstr ""

#: ../../A_Getting_started_anyscript/lesson3.rst:226
msgid ""
"When you right-click the ElbowNode, you can select **\"Insert object "
"name\"** from the context menu. This writes the full path of the node "
"into the Elbow joint definition where you placed the cursor. Notice that "
"this method inserts the absolute and not the relative path. Repeat the "
"process to expand the ForeArm segment and insert its ElbowNode in the "
"line below to obtain this:"
msgstr ""

#: ../../A_Getting_started_anyscript/lesson3.rst:242
msgid ""
"It seems like everything is connected now. So why do we still get the "
"annoying error message when we reload the model?"
msgstr ""

#: ../../A_Getting_started_anyscript/lesson3.rst:250
msgid ""
"The explanation is that we have connected the model, but we have not "
"specified its position yet. Each of the two joints can still take any "
"angular position, so there are two degrees of freedom whose kinematic "
"states need to specified before AnyBody can determine the mechanism's "
"position. This is taken care of by kinematic drivers."
msgstr ""

#: ../../A_Getting_started_anyscript/lesson3.rst:260
msgid ""
"**Next lesson:** They are one of the subjects of :doc:`Lesson 4: "
"Imparting Movement with Drivers <lesson4>`."
msgstr ""

#: ../../A_Getting_started_anyscript/lesson3.rst:274
msgid "noindex"
msgstr ""

